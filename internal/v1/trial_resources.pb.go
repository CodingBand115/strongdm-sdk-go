// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: trial_resources.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TrialResourceCreateRequest specifies what kind of TrialResources should be registered in
// the organizations fleet.
type TrialResourceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Parameters to define the new TrialResource.
	TrialResource *TrialResource `protobuf:"bytes,2,opt,name=trial_resource,json=trialResource,proto3" json:"trial_resource,omitempty"`
}

func (x *TrialResourceCreateRequest) Reset() {
	*x = TrialResourceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResourceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResourceCreateRequest) ProtoMessage() {}

func (x *TrialResourceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trial_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResourceCreateRequest.ProtoReflect.Descriptor instead.
func (*TrialResourceCreateRequest) Descriptor() ([]byte, []int) {
	return file_trial_resources_proto_rawDescGZIP(), []int{0}
}

func (x *TrialResourceCreateRequest) GetMeta() *CreateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TrialResourceCreateRequest) GetTrialResource() *TrialResource {
	if x != nil {
		return x.TrialResource
	}
	return nil
}

// TrialResourceCreateResponse reports how the TrialResource was created in the system.
type TrialResourceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The created TrialResource.
	TrialResource *TrialResource `protobuf:"bytes,2,opt,name=trial_resource,json=trialResource,proto3" json:"trial_resource,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *TrialResourceCreateResponse) Reset() {
	*x = TrialResourceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResourceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResourceCreateResponse) ProtoMessage() {}

func (x *TrialResourceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trial_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResourceCreateResponse.ProtoReflect.Descriptor instead.
func (*TrialResourceCreateResponse) Descriptor() ([]byte, []int) {
	return file_trial_resources_proto_rawDescGZIP(), []int{1}
}

func (x *TrialResourceCreateResponse) GetMeta() *CreateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TrialResourceCreateResponse) GetTrialResource() *TrialResource {
	if x != nil {
		return x.TrialResource
	}
	return nil
}

func (x *TrialResourceCreateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// TrialResourceUpdateRequest identifies a TrialResource by ID and provides fields to update on
// that TrialResource record.
type TrialResourceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *UpdateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the TrialResource to update. If an ID is already
	// specified in the `TrialResource` field, this field is not required. If an ID is
	// specified in both places, they must match.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Parameters to overwrite the specified TrialResource.
	TrialResource *TrialResource `protobuf:"bytes,3,opt,name=trial_resource,json=trialResource,proto3" json:"trial_resource,omitempty"`
}

func (x *TrialResourceUpdateRequest) Reset() {
	*x = TrialResourceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResourceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResourceUpdateRequest) ProtoMessage() {}

func (x *TrialResourceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trial_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResourceUpdateRequest.ProtoReflect.Descriptor instead.
func (*TrialResourceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_trial_resources_proto_rawDescGZIP(), []int{2}
}

func (x *TrialResourceUpdateRequest) GetMeta() *UpdateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TrialResourceUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrialResourceUpdateRequest) GetTrialResource() *TrialResource {
	if x != nil {
		return x.TrialResource
	}
	return nil
}

// TrialResourceUpdateResponse returns the fields of a TrialResource after it has been updated by
// a TrialResourceUpdateRequest.
type TrialResourceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *UpdateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The updated TrialResource.
	TrialResource *TrialResource `protobuf:"bytes,2,opt,name=trial_resource,json=trialResource,proto3" json:"trial_resource,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *TrialResourceUpdateResponse) Reset() {
	*x = TrialResourceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResourceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResourceUpdateResponse) ProtoMessage() {}

func (x *TrialResourceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trial_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResourceUpdateResponse.ProtoReflect.Descriptor instead.
func (*TrialResourceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_trial_resources_proto_rawDescGZIP(), []int{3}
}

func (x *TrialResourceUpdateResponse) GetMeta() *UpdateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TrialResourceUpdateResponse) GetTrialResource() *TrialResource {
	if x != nil {
		return x.TrialResource
	}
	return nil
}

func (x *TrialResourceUpdateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// TrialResourceListForOrganizationRequest specifies criteria for retrieving a list of TrialResources.
type TrialResourceListForOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging parameters for the query.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *TrialResourceListForOrganizationRequest) Reset() {
	*x = TrialResourceListForOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResourceListForOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResourceListForOrganizationRequest) ProtoMessage() {}

func (x *TrialResourceListForOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trial_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResourceListForOrganizationRequest.ProtoReflect.Descriptor instead.
func (*TrialResourceListForOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_trial_resources_proto_rawDescGZIP(), []int{4}
}

func (x *TrialResourceListForOrganizationRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TrialResourceListForOrganizationRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// TrialResourceListForOrganizationResponse returns a list of TrialResources that meet the criteria of a
// TrialResourceListForOrganizationRequest.
type TrialResourceListForOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging information for the query.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A single page of results matching the list request criteria.
	TrialResources []*TrialResource `protobuf:"bytes,2,rep,name=trial_resources,json=trialResources,proto3" json:"trial_resources,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *TrialResourceListForOrganizationResponse) Reset() {
	*x = TrialResourceListForOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResourceListForOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResourceListForOrganizationResponse) ProtoMessage() {}

func (x *TrialResourceListForOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trial_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResourceListForOrganizationResponse.ProtoReflect.Descriptor instead.
func (*TrialResourceListForOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_trial_resources_proto_rawDescGZIP(), []int{5}
}

func (x *TrialResourceListForOrganizationResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TrialResourceListForOrganizationResponse) GetTrialResources() []*TrialResource {
	if x != nil {
		return x.TrialResources
	}
	return nil
}

func (x *TrialResourceListForOrganizationResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// TrialResourceListAllRequest specifies criteria for retrieving a list of TrialResources.
type TrialResourceListAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging parameters for the query.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *TrialResourceListAllRequest) Reset() {
	*x = TrialResourceListAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResourceListAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResourceListAllRequest) ProtoMessage() {}

func (x *TrialResourceListAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trial_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResourceListAllRequest.ProtoReflect.Descriptor instead.
func (*TrialResourceListAllRequest) Descriptor() ([]byte, []int) {
	return file_trial_resources_proto_rawDescGZIP(), []int{6}
}

func (x *TrialResourceListAllRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TrialResourceListAllRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// TrialResourceListAllResponse returns a list of TrialResources that meet the criteria of a
// TrialResourceListAllRequest.
type TrialResourceListAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging information for the query.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A single page of results matching the list request criteria.
	TrialResources []*TrialResource `protobuf:"bytes,2,rep,name=trial_resources,json=trialResources,proto3" json:"trial_resources,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *TrialResourceListAllResponse) Reset() {
	*x = TrialResourceListAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResourceListAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResourceListAllResponse) ProtoMessage() {}

func (x *TrialResourceListAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trial_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResourceListAllResponse.ProtoReflect.Descriptor instead.
func (*TrialResourceListAllResponse) Descriptor() ([]byte, []int) {
	return file_trial_resources_proto_rawDescGZIP(), []int{7}
}

func (x *TrialResourceListAllResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TrialResourceListAllResponse) GetTrialResources() []*TrialResource {
	if x != nil {
		return x.TrialResources
	}
	return nil
}

func (x *TrialResourceListAllResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// TrialResources represent a resource or gateway provisioned automatically for
// a trial organization.
type TrialResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the TrialResource.
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestType string `protobuf:"bytes,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	// The ID of the resource created for this TrialResource, if any.
	CreatedResourceId string `protobuf:"bytes,3,opt,name=created_resource_id,json=createdResourceId,proto3" json:"created_resource_id,omitempty"`
	// The ID of the node created for this TrialResource, if any.
	CreatedNodeId string `protobuf:"bytes,4,opt,name=created_node_id,json=createdNodeId,proto3" json:"created_node_id,omitempty"`
}

func (x *TrialResource) Reset() {
	*x = TrialResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResource) ProtoMessage() {}

func (x *TrialResource) ProtoReflect() protoreflect.Message {
	mi := &file_trial_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResource.ProtoReflect.Descriptor instead.
func (*TrialResource) Descriptor() ([]byte, []int) {
	return file_trial_resources_proto_rawDescGZIP(), []int{8}
}

func (x *TrialResource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrialResource) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *TrialResource) GetCreatedResourceId() string {
	if x != nil {
		return x.CreatedResourceId
	}
	return ""
}

func (x *TrialResource) GetCreatedNodeId() string {
	if x != nil {
		return x.CreatedNodeId
	}
	return ""
}

var File_trial_resources_proto protoreflect.FileDescriptor

var file_trial_resources_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x1b, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x14, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0x90, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8,
	0xf3, 0xb3, 0x07, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x14, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0x90, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3,
	0x07, 0x01, 0x22, 0x7a, 0x0a, 0x27, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xec,
	0x01, 0x0a, 0x28, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb8, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x14, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0x90, 0xf4, 0xb3,
	0x07, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6e, 0x0a,
	0x1b, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xe0, 0x01,
	0x0a, 0x1c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0f,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb8,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x14, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0x90, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x84, 0x03, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0xf2, 0xf8, 0xb3, 0x07, 0x1e, 0xa2, 0xf3, 0xb3, 0x07, 0x02, 0x49, 0x44, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x66, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xf2,
	0xf8, 0xb3, 0x07, 0x3e, 0xa2, 0xf3, 0xb3, 0x07, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xaa, 0xf4,
	0xb3, 0x07, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x64, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xf2, 0xf8,
	0xb3, 0x07, 0x2f, 0xa2, 0xf3, 0xb3, 0x07, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xf2, 0xf8, 0xb3, 0x07, 0x25, 0xa2, 0xf3, 0xb3, 0x07, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x3a, 0x1c, 0xfa, 0xf8, 0xb3, 0x07, 0x17,
	0xa2, 0xf3, 0xb3, 0x07, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x32, 0x96, 0x04, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xf9, 0xb3, 0x07, 0x09, 0xa2, 0xf3, 0xb3, 0x07,
	0x04, 0x70, 0x6f, 0x73, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x18, 0xaa, 0xf3, 0xb3, 0x07, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07,
	0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x18, 0xaa, 0xf3, 0xb3, 0x07, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x4e, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xf9,
	0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x70, 0x75, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1d,
	0xaa, 0xf3, 0xb3, 0x07, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x21, 0xca,
	0xf9, 0xb3, 0x07, 0x12, 0xc2, 0xf9, 0xb3, 0x07, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xca, 0xf9, 0xb3, 0x07, 0x05, 0xc8, 0xf9, 0xb3, 0x07, 0x01,
	0x42, 0x6a, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67,
	0x42, 0x16, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x50, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trial_resources_proto_rawDescOnce sync.Once
	file_trial_resources_proto_rawDescData = file_trial_resources_proto_rawDesc
)

func file_trial_resources_proto_rawDescGZIP() []byte {
	file_trial_resources_proto_rawDescOnce.Do(func() {
		file_trial_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_trial_resources_proto_rawDescData)
	})
	return file_trial_resources_proto_rawDescData
}

var file_trial_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_trial_resources_proto_goTypes = []interface{}{
	(*TrialResourceCreateRequest)(nil),               // 0: v1.TrialResourceCreateRequest
	(*TrialResourceCreateResponse)(nil),              // 1: v1.TrialResourceCreateResponse
	(*TrialResourceUpdateRequest)(nil),               // 2: v1.TrialResourceUpdateRequest
	(*TrialResourceUpdateResponse)(nil),              // 3: v1.TrialResourceUpdateResponse
	(*TrialResourceListForOrganizationRequest)(nil),  // 4: v1.TrialResourceListForOrganizationRequest
	(*TrialResourceListForOrganizationResponse)(nil), // 5: v1.TrialResourceListForOrganizationResponse
	(*TrialResourceListAllRequest)(nil),              // 6: v1.TrialResourceListAllRequest
	(*TrialResourceListAllResponse)(nil),             // 7: v1.TrialResourceListAllResponse
	(*TrialResource)(nil),                            // 8: v1.TrialResource
	(*CreateRequestMetadata)(nil),                    // 9: v1.CreateRequestMetadata
	(*CreateResponseMetadata)(nil),                   // 10: v1.CreateResponseMetadata
	(*RateLimitMetadata)(nil),                        // 11: v1.RateLimitMetadata
	(*UpdateRequestMetadata)(nil),                    // 12: v1.UpdateRequestMetadata
	(*UpdateResponseMetadata)(nil),                   // 13: v1.UpdateResponseMetadata
	(*ListRequestMetadata)(nil),                      // 14: v1.ListRequestMetadata
	(*ListResponseMetadata)(nil),                     // 15: v1.ListResponseMetadata
}
var file_trial_resources_proto_depIdxs = []int32{
	9,  // 0: v1.TrialResourceCreateRequest.meta:type_name -> v1.CreateRequestMetadata
	8,  // 1: v1.TrialResourceCreateRequest.trial_resource:type_name -> v1.TrialResource
	10, // 2: v1.TrialResourceCreateResponse.meta:type_name -> v1.CreateResponseMetadata
	8,  // 3: v1.TrialResourceCreateResponse.trial_resource:type_name -> v1.TrialResource
	11, // 4: v1.TrialResourceCreateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	12, // 5: v1.TrialResourceUpdateRequest.meta:type_name -> v1.UpdateRequestMetadata
	8,  // 6: v1.TrialResourceUpdateRequest.trial_resource:type_name -> v1.TrialResource
	13, // 7: v1.TrialResourceUpdateResponse.meta:type_name -> v1.UpdateResponseMetadata
	8,  // 8: v1.TrialResourceUpdateResponse.trial_resource:type_name -> v1.TrialResource
	11, // 9: v1.TrialResourceUpdateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	14, // 10: v1.TrialResourceListForOrganizationRequest.meta:type_name -> v1.ListRequestMetadata
	15, // 11: v1.TrialResourceListForOrganizationResponse.meta:type_name -> v1.ListResponseMetadata
	8,  // 12: v1.TrialResourceListForOrganizationResponse.trial_resources:type_name -> v1.TrialResource
	11, // 13: v1.TrialResourceListForOrganizationResponse.rate_limit:type_name -> v1.RateLimitMetadata
	14, // 14: v1.TrialResourceListAllRequest.meta:type_name -> v1.ListRequestMetadata
	15, // 15: v1.TrialResourceListAllResponse.meta:type_name -> v1.ListResponseMetadata
	8,  // 16: v1.TrialResourceListAllResponse.trial_resources:type_name -> v1.TrialResource
	11, // 17: v1.TrialResourceListAllResponse.rate_limit:type_name -> v1.RateLimitMetadata
	0,  // 18: v1.TrialResources.Create:input_type -> v1.TrialResourceCreateRequest
	4,  // 19: v1.TrialResources.ListForOrganization:input_type -> v1.TrialResourceListForOrganizationRequest
	6,  // 20: v1.TrialResources.ListAll:input_type -> v1.TrialResourceListAllRequest
	2,  // 21: v1.TrialResources.Update:input_type -> v1.TrialResourceUpdateRequest
	1,  // 22: v1.TrialResources.Create:output_type -> v1.TrialResourceCreateResponse
	5,  // 23: v1.TrialResources.ListForOrganization:output_type -> v1.TrialResourceListForOrganizationResponse
	7,  // 24: v1.TrialResources.ListAll:output_type -> v1.TrialResourceListAllResponse
	3,  // 25: v1.TrialResources.Update:output_type -> v1.TrialResourceUpdateResponse
	22, // [22:26] is the sub-list for method output_type
	18, // [18:22] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_trial_resources_proto_init() }
func file_trial_resources_proto_init() {
	if File_trial_resources_proto != nil {
		return
	}
	file_options_proto_init()
	file_spec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trial_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResourceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResourceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResourceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResourceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResourceListForOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_resources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResourceListForOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_resources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResourceListAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_resources_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResourceListAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_resources_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trial_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trial_resources_proto_goTypes,
		DependencyIndexes: file_trial_resources_proto_depIdxs,
		MessageInfos:      file_trial_resources_proto_msgTypes,
	}.Build()
	File_trial_resources_proto = out.File
	file_trial_resources_proto_rawDesc = nil
	file_trial_resources_proto_goTypes = nil
	file_trial_resources_proto_depIdxs = nil
}

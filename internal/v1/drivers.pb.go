// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drivers.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A Resource is a server or service which clients connect to through relays.
type Resource struct {
	// Types that are valid to be assigned to Resource:
	//	*Resource_Kubernetes
	//	*Resource_AmazonEks
	//	*Resource_GoogleGke
	//	*Resource_HttpBasicAuth
	//	*Resource_HttpNoAuth
	//	*Resource_HttpAuth
	//	*Resource_Mysql
	//	*Resource_AuroraMysql
	//	*Resource_Clustrix
	//	*Resource_Maria
	//	*Resource_Memsql
	//	*Resource_Athena
	Resource             isResource_Resource `protobuf_oneof:"resource"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{0}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

type isResource_Resource interface {
	isResource_Resource()
}

type Resource_Kubernetes struct {
	Kubernetes *Kubernetes `protobuf:"bytes,231451540,opt,name=kubernetes,proto3,oneof"`
}

type Resource_AmazonEks struct {
	AmazonEks *AmazonEKS `protobuf:"bytes,144724720,opt,name=amazon_eks,json=amazonEks,proto3,oneof"`
}

type Resource_GoogleGke struct {
	GoogleGke *GoogleGKE `protobuf:"bytes,138696469,opt,name=google_gke,json=googleGke,proto3,oneof"`
}

type Resource_HttpBasicAuth struct {
	HttpBasicAuth *HTTPBasicAuth `protobuf:"bytes,448320780,opt,name=http_basic_auth,json=httpBasicAuth,proto3,oneof"`
}

type Resource_HttpNoAuth struct {
	HttpNoAuth *HTTPNoAuth `protobuf:"bytes,435770653,opt,name=http_no_auth,json=httpNoAuth,proto3,oneof"`
}

type Resource_HttpAuth struct {
	HttpAuth *HTTPAuth `protobuf:"bytes,224436590,opt,name=http_auth,json=httpAuth,proto3,oneof"`
}

type Resource_Mysql struct {
	Mysql *Mysql `protobuf:"bytes,386203715,opt,name=mysql,proto3,oneof"`
}

type Resource_AuroraMysql struct {
	AuroraMysql *AuroraMysql `protobuf:"bytes,18289005,opt,name=aurora_mysql,json=auroraMysql,proto3,oneof"`
}

type Resource_Clustrix struct {
	Clustrix *Clustrix `protobuf:"bytes,532386964,opt,name=clustrix,proto3,oneof"`
}

type Resource_Maria struct {
	Maria *Maria `protobuf:"bytes,466202260,opt,name=maria,proto3,oneof"`
}

type Resource_Memsql struct {
	Memsql *Memsql `protobuf:"bytes,269999277,opt,name=memsql,proto3,oneof"`
}

type Resource_Athena struct {
	Athena *Athena `protobuf:"bytes,86524680,opt,name=athena,proto3,oneof"`
}

func (*Resource_Kubernetes) isResource_Resource() {}

func (*Resource_AmazonEks) isResource_Resource() {}

func (*Resource_GoogleGke) isResource_Resource() {}

func (*Resource_HttpBasicAuth) isResource_Resource() {}

func (*Resource_HttpNoAuth) isResource_Resource() {}

func (*Resource_HttpAuth) isResource_Resource() {}

func (*Resource_Mysql) isResource_Resource() {}

func (*Resource_AuroraMysql) isResource_Resource() {}

func (*Resource_Clustrix) isResource_Resource() {}

func (*Resource_Maria) isResource_Resource() {}

func (*Resource_Memsql) isResource_Resource() {}

func (*Resource_Athena) isResource_Resource() {}

func (m *Resource) GetResource() isResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Resource) GetKubernetes() *Kubernetes {
	if x, ok := m.GetResource().(*Resource_Kubernetes); ok {
		return x.Kubernetes
	}
	return nil
}

func (m *Resource) GetAmazonEks() *AmazonEKS {
	if x, ok := m.GetResource().(*Resource_AmazonEks); ok {
		return x.AmazonEks
	}
	return nil
}

func (m *Resource) GetGoogleGke() *GoogleGKE {
	if x, ok := m.GetResource().(*Resource_GoogleGke); ok {
		return x.GoogleGke
	}
	return nil
}

func (m *Resource) GetHttpBasicAuth() *HTTPBasicAuth {
	if x, ok := m.GetResource().(*Resource_HttpBasicAuth); ok {
		return x.HttpBasicAuth
	}
	return nil
}

func (m *Resource) GetHttpNoAuth() *HTTPNoAuth {
	if x, ok := m.GetResource().(*Resource_HttpNoAuth); ok {
		return x.HttpNoAuth
	}
	return nil
}

func (m *Resource) GetHttpAuth() *HTTPAuth {
	if x, ok := m.GetResource().(*Resource_HttpAuth); ok {
		return x.HttpAuth
	}
	return nil
}

func (m *Resource) GetMysql() *Mysql {
	if x, ok := m.GetResource().(*Resource_Mysql); ok {
		return x.Mysql
	}
	return nil
}

func (m *Resource) GetAuroraMysql() *AuroraMysql {
	if x, ok := m.GetResource().(*Resource_AuroraMysql); ok {
		return x.AuroraMysql
	}
	return nil
}

func (m *Resource) GetClustrix() *Clustrix {
	if x, ok := m.GetResource().(*Resource_Clustrix); ok {
		return x.Clustrix
	}
	return nil
}

func (m *Resource) GetMaria() *Maria {
	if x, ok := m.GetResource().(*Resource_Maria); ok {
		return x.Maria
	}
	return nil
}

func (m *Resource) GetMemsql() *Memsql {
	if x, ok := m.GetResource().(*Resource_Memsql); ok {
		return x.Memsql
	}
	return nil
}

func (m *Resource) GetAthena() *Athena {
	if x, ok := m.GetResource().(*Resource_Athena); ok {
		return x.Athena
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Resource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Resource_Kubernetes)(nil),
		(*Resource_AmazonEks)(nil),
		(*Resource_GoogleGke)(nil),
		(*Resource_HttpBasicAuth)(nil),
		(*Resource_HttpNoAuth)(nil),
		(*Resource_HttpAuth)(nil),
		(*Resource_Mysql)(nil),
		(*Resource_AuroraMysql)(nil),
		(*Resource_Clustrix)(nil),
		(*Resource_Maria)(nil),
		(*Resource_Memsql)(nil),
		(*Resource_Athena)(nil),
	}
}

type Kubernetes struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	CertificateAuthority string   `protobuf:"bytes,3,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	ClientCertificate    string   `protobuf:"bytes,4,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	ClientKey            string   `protobuf:"bytes,5,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kubernetes) Reset()         { *m = Kubernetes{} }
func (m *Kubernetes) String() string { return proto.CompactTextString(m) }
func (*Kubernetes) ProtoMessage()    {}
func (*Kubernetes) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{1}
}

func (m *Kubernetes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kubernetes.Unmarshal(m, b)
}
func (m *Kubernetes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kubernetes.Marshal(b, m, deterministic)
}
func (m *Kubernetes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kubernetes.Merge(m, src)
}
func (m *Kubernetes) XXX_Size() int {
	return xxx_messageInfo_Kubernetes.Size(m)
}
func (m *Kubernetes) XXX_DiscardUnknown() {
	xxx_messageInfo_Kubernetes.DiscardUnknown(m)
}

var xxx_messageInfo_Kubernetes proto.InternalMessageInfo

func (m *Kubernetes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Kubernetes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Kubernetes) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *Kubernetes) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *Kubernetes) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Kubernetes) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Kubernetes) GetCertificateAuthority() string {
	if m != nil {
		return m.CertificateAuthority
	}
	return ""
}

func (m *Kubernetes) GetClientCertificate() string {
	if m != nil {
		return m.ClientCertificate
	}
	return ""
}

func (m *Kubernetes) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

type AmazonEKS struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKey            string   `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretAccessKey      string   `protobuf:"bytes,3,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	CertificateAuthority string   `protobuf:"bytes,4,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	Region               string   `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	ClusterName          string   `protobuf:"bytes,6,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AmazonEKS) Reset()         { *m = AmazonEKS{} }
func (m *AmazonEKS) String() string { return proto.CompactTextString(m) }
func (*AmazonEKS) ProtoMessage()    {}
func (*AmazonEKS) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{2}
}

func (m *AmazonEKS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AmazonEKS.Unmarshal(m, b)
}
func (m *AmazonEKS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AmazonEKS.Marshal(b, m, deterministic)
}
func (m *AmazonEKS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmazonEKS.Merge(m, src)
}
func (m *AmazonEKS) XXX_Size() int {
	return xxx_messageInfo_AmazonEKS.Size(m)
}
func (m *AmazonEKS) XXX_DiscardUnknown() {
	xxx_messageInfo_AmazonEKS.DiscardUnknown(m)
}

var xxx_messageInfo_AmazonEKS proto.InternalMessageInfo

func (m *AmazonEKS) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AmazonEKS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AmazonEKS) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *AmazonEKS) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *AmazonEKS) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *AmazonEKS) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *AmazonEKS) GetSecretAccessKey() string {
	if m != nil {
		return m.SecretAccessKey
	}
	return ""
}

func (m *AmazonEKS) GetCertificateAuthority() string {
	if m != nil {
		return m.CertificateAuthority
	}
	return ""
}

func (m *AmazonEKS) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *AmazonEKS) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type GoogleGKE struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	CertificateAuthority string   `protobuf:"bytes,2,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	ServiceAccountKey    string   `protobuf:"bytes,3,opt,name=service_account_key,json=serviceAccountKey,proto3" json:"service_account_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoogleGKE) Reset()         { *m = GoogleGKE{} }
func (m *GoogleGKE) String() string { return proto.CompactTextString(m) }
func (*GoogleGKE) ProtoMessage()    {}
func (*GoogleGKE) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{3}
}

func (m *GoogleGKE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoogleGKE.Unmarshal(m, b)
}
func (m *GoogleGKE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoogleGKE.Marshal(b, m, deterministic)
}
func (m *GoogleGKE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleGKE.Merge(m, src)
}
func (m *GoogleGKE) XXX_Size() int {
	return xxx_messageInfo_GoogleGKE.Size(m)
}
func (m *GoogleGKE) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleGKE.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleGKE proto.InternalMessageInfo

func (m *GoogleGKE) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GoogleGKE) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GoogleGKE) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *GoogleGKE) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *GoogleGKE) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *GoogleGKE) GetCertificateAuthority() string {
	if m != nil {
		return m.CertificateAuthority
	}
	return ""
}

func (m *GoogleGKE) GetServiceAccountKey() string {
	if m != nil {
		return m.ServiceAccountKey
	}
	return ""
}

type HTTPBasicAuth struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	HealthcheckPath      string   `protobuf:"bytes,2,opt,name=healthcheck_path,json=healthcheckPath,proto3" json:"healthcheck_path,omitempty"`
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	HeadersBlacklist     string   `protobuf:"bytes,5,opt,name=headers_blacklist,json=headersBlacklist,proto3" json:"headers_blacklist,omitempty"`
	DefaultPath          string   `protobuf:"bytes,6,opt,name=default_path,json=defaultPath,proto3" json:"default_path,omitempty"`
	Subdomain            string   `protobuf:"bytes,7,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPBasicAuth) Reset()         { *m = HTTPBasicAuth{} }
func (m *HTTPBasicAuth) String() string { return proto.CompactTextString(m) }
func (*HTTPBasicAuth) ProtoMessage()    {}
func (*HTTPBasicAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{4}
}

func (m *HTTPBasicAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPBasicAuth.Unmarshal(m, b)
}
func (m *HTTPBasicAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPBasicAuth.Marshal(b, m, deterministic)
}
func (m *HTTPBasicAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPBasicAuth.Merge(m, src)
}
func (m *HTTPBasicAuth) XXX_Size() int {
	return xxx_messageInfo_HTTPBasicAuth.Size(m)
}
func (m *HTTPBasicAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPBasicAuth.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPBasicAuth proto.InternalMessageInfo

func (m *HTTPBasicAuth) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HTTPBasicAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HTTPBasicAuth) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *HTTPBasicAuth) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *HTTPBasicAuth) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPBasicAuth) GetHealthcheckPath() string {
	if m != nil {
		return m.HealthcheckPath
	}
	return ""
}

func (m *HTTPBasicAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *HTTPBasicAuth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *HTTPBasicAuth) GetHeadersBlacklist() string {
	if m != nil {
		return m.HeadersBlacklist
	}
	return ""
}

func (m *HTTPBasicAuth) GetDefaultPath() string {
	if m != nil {
		return m.DefaultPath
	}
	return ""
}

func (m *HTTPBasicAuth) GetSubdomain() string {
	if m != nil {
		return m.Subdomain
	}
	return ""
}

type HTTPNoAuth struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	HealthcheckPath      string   `protobuf:"bytes,2,opt,name=healthcheck_path,json=healthcheckPath,proto3" json:"healthcheck_path,omitempty"`
	HeadersBlacklist     string   `protobuf:"bytes,3,opt,name=headers_blacklist,json=headersBlacklist,proto3" json:"headers_blacklist,omitempty"`
	DefaultPath          string   `protobuf:"bytes,4,opt,name=default_path,json=defaultPath,proto3" json:"default_path,omitempty"`
	Subdomain            string   `protobuf:"bytes,5,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPNoAuth) Reset()         { *m = HTTPNoAuth{} }
func (m *HTTPNoAuth) String() string { return proto.CompactTextString(m) }
func (*HTTPNoAuth) ProtoMessage()    {}
func (*HTTPNoAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{5}
}

func (m *HTTPNoAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPNoAuth.Unmarshal(m, b)
}
func (m *HTTPNoAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPNoAuth.Marshal(b, m, deterministic)
}
func (m *HTTPNoAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPNoAuth.Merge(m, src)
}
func (m *HTTPNoAuth) XXX_Size() int {
	return xxx_messageInfo_HTTPNoAuth.Size(m)
}
func (m *HTTPNoAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPNoAuth.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPNoAuth proto.InternalMessageInfo

func (m *HTTPNoAuth) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HTTPNoAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HTTPNoAuth) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *HTTPNoAuth) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *HTTPNoAuth) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPNoAuth) GetHealthcheckPath() string {
	if m != nil {
		return m.HealthcheckPath
	}
	return ""
}

func (m *HTTPNoAuth) GetHeadersBlacklist() string {
	if m != nil {
		return m.HeadersBlacklist
	}
	return ""
}

func (m *HTTPNoAuth) GetDefaultPath() string {
	if m != nil {
		return m.DefaultPath
	}
	return ""
}

func (m *HTTPNoAuth) GetSubdomain() string {
	if m != nil {
		return m.Subdomain
	}
	return ""
}

type HTTPAuth struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	HealthcheckPath      string   `protobuf:"bytes,2,opt,name=healthcheck_path,json=healthcheckPath,proto3" json:"healthcheck_path,omitempty"`
	AuthHeader           string   `protobuf:"bytes,3,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	HeadersBlacklist     string   `protobuf:"bytes,4,opt,name=headers_blacklist,json=headersBlacklist,proto3" json:"headers_blacklist,omitempty"`
	DefaultPath          string   `protobuf:"bytes,5,opt,name=default_path,json=defaultPath,proto3" json:"default_path,omitempty"`
	Subdomain            string   `protobuf:"bytes,6,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPAuth) Reset()         { *m = HTTPAuth{} }
func (m *HTTPAuth) String() string { return proto.CompactTextString(m) }
func (*HTTPAuth) ProtoMessage()    {}
func (*HTTPAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{6}
}

func (m *HTTPAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPAuth.Unmarshal(m, b)
}
func (m *HTTPAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPAuth.Marshal(b, m, deterministic)
}
func (m *HTTPAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPAuth.Merge(m, src)
}
func (m *HTTPAuth) XXX_Size() int {
	return xxx_messageInfo_HTTPAuth.Size(m)
}
func (m *HTTPAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPAuth.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPAuth proto.InternalMessageInfo

func (m *HTTPAuth) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HTTPAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HTTPAuth) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *HTTPAuth) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *HTTPAuth) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPAuth) GetHealthcheckPath() string {
	if m != nil {
		return m.HealthcheckPath
	}
	return ""
}

func (m *HTTPAuth) GetAuthHeader() string {
	if m != nil {
		return m.AuthHeader
	}
	return ""
}

func (m *HTTPAuth) GetHeadersBlacklist() string {
	if m != nil {
		return m.HeadersBlacklist
	}
	return ""
}

func (m *HTTPAuth) GetDefaultPath() string {
	if m != nil {
		return m.DefaultPath
	}
	return ""
}

func (m *HTTPAuth) GetSubdomain() string {
	if m != nil {
		return m.Subdomain
	}
	return ""
}

type Mysql struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Database             string   `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	Port                 int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mysql) Reset()         { *m = Mysql{} }
func (m *Mysql) String() string { return proto.CompactTextString(m) }
func (*Mysql) ProtoMessage()    {}
func (*Mysql) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{7}
}

func (m *Mysql) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mysql.Unmarshal(m, b)
}
func (m *Mysql) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mysql.Marshal(b, m, deterministic)
}
func (m *Mysql) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mysql.Merge(m, src)
}
func (m *Mysql) XXX_Size() int {
	return xxx_messageInfo_Mysql.Size(m)
}
func (m *Mysql) XXX_DiscardUnknown() {
	xxx_messageInfo_Mysql.DiscardUnknown(m)
}

var xxx_messageInfo_Mysql proto.InternalMessageInfo

func (m *Mysql) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Mysql) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mysql) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *Mysql) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *Mysql) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Mysql) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Mysql) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Mysql) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Mysql) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type AuroraMysql struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Database             string   `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	Port                 int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuroraMysql) Reset()         { *m = AuroraMysql{} }
func (m *AuroraMysql) String() string { return proto.CompactTextString(m) }
func (*AuroraMysql) ProtoMessage()    {}
func (*AuroraMysql) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{8}
}

func (m *AuroraMysql) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuroraMysql.Unmarshal(m, b)
}
func (m *AuroraMysql) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuroraMysql.Marshal(b, m, deterministic)
}
func (m *AuroraMysql) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuroraMysql.Merge(m, src)
}
func (m *AuroraMysql) XXX_Size() int {
	return xxx_messageInfo_AuroraMysql.Size(m)
}
func (m *AuroraMysql) XXX_DiscardUnknown() {
	xxx_messageInfo_AuroraMysql.DiscardUnknown(m)
}

var xxx_messageInfo_AuroraMysql proto.InternalMessageInfo

func (m *AuroraMysql) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuroraMysql) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuroraMysql) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *AuroraMysql) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *AuroraMysql) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *AuroraMysql) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuroraMysql) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuroraMysql) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *AuroraMysql) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Clustrix struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Database             string   `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	Port                 int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clustrix) Reset()         { *m = Clustrix{} }
func (m *Clustrix) String() string { return proto.CompactTextString(m) }
func (*Clustrix) ProtoMessage()    {}
func (*Clustrix) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{9}
}

func (m *Clustrix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Clustrix.Unmarshal(m, b)
}
func (m *Clustrix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Clustrix.Marshal(b, m, deterministic)
}
func (m *Clustrix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clustrix.Merge(m, src)
}
func (m *Clustrix) XXX_Size() int {
	return xxx_messageInfo_Clustrix.Size(m)
}
func (m *Clustrix) XXX_DiscardUnknown() {
	xxx_messageInfo_Clustrix.DiscardUnknown(m)
}

var xxx_messageInfo_Clustrix proto.InternalMessageInfo

func (m *Clustrix) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Clustrix) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Clustrix) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *Clustrix) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *Clustrix) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Clustrix) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Clustrix) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Clustrix) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Clustrix) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Maria struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Database             string   `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	Port                 int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Maria) Reset()         { *m = Maria{} }
func (m *Maria) String() string { return proto.CompactTextString(m) }
func (*Maria) ProtoMessage()    {}
func (*Maria) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{10}
}

func (m *Maria) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Maria.Unmarshal(m, b)
}
func (m *Maria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Maria.Marshal(b, m, deterministic)
}
func (m *Maria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Maria.Merge(m, src)
}
func (m *Maria) XXX_Size() int {
	return xxx_messageInfo_Maria.Size(m)
}
func (m *Maria) XXX_DiscardUnknown() {
	xxx_messageInfo_Maria.DiscardUnknown(m)
}

var xxx_messageInfo_Maria proto.InternalMessageInfo

func (m *Maria) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Maria) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Maria) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *Maria) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *Maria) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Maria) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Maria) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Maria) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Maria) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Memsql struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Database             string   `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	Port                 int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Memsql) Reset()         { *m = Memsql{} }
func (m *Memsql) String() string { return proto.CompactTextString(m) }
func (*Memsql) ProtoMessage()    {}
func (*Memsql) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{11}
}

func (m *Memsql) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Memsql.Unmarshal(m, b)
}
func (m *Memsql) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Memsql.Marshal(b, m, deterministic)
}
func (m *Memsql) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Memsql.Merge(m, src)
}
func (m *Memsql) XXX_Size() int {
	return xxx_messageInfo_Memsql.Size(m)
}
func (m *Memsql) XXX_DiscardUnknown() {
	xxx_messageInfo_Memsql.DiscardUnknown(m)
}

var xxx_messageInfo_Memsql proto.InternalMessageInfo

func (m *Memsql) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Memsql) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Memsql) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *Memsql) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *Memsql) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Memsql) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Memsql) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Memsql) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Memsql) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Athena struct {
	// Unique identifier of the Resource.
	Id string `protobuf:"bytes,32768,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Resource.
	Name string `protobuf:"bytes,32769,opt,name=name,proto3" json:"name,omitempty"`
	// Port number override.
	PortOverride int32 `protobuf:"varint,32770,opt,name=port_override,json=portOverride,proto3" json:"port_override,omitempty"`
	// True if the datasource is reachable and the credentials are valid.
	Healthy              bool     `protobuf:"varint,32771,opt,name=healthy,proto3" json:"healthy,omitempty"`
	AccessKey            string   `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretAccessKey      string   `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	Region               string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Output               string   `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Athena) Reset()         { *m = Athena{} }
func (m *Athena) String() string { return proto.CompactTextString(m) }
func (*Athena) ProtoMessage()    {}
func (*Athena) Descriptor() ([]byte, []int) {
	return fileDescriptor_81dfd49b5b303fb4, []int{12}
}

func (m *Athena) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Athena.Unmarshal(m, b)
}
func (m *Athena) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Athena.Marshal(b, m, deterministic)
}
func (m *Athena) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Athena.Merge(m, src)
}
func (m *Athena) XXX_Size() int {
	return xxx_messageInfo_Athena.Size(m)
}
func (m *Athena) XXX_DiscardUnknown() {
	xxx_messageInfo_Athena.DiscardUnknown(m)
}

var xxx_messageInfo_Athena proto.InternalMessageInfo

func (m *Athena) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Athena) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Athena) GetPortOverride() int32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

func (m *Athena) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func (m *Athena) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *Athena) GetSecretAccessKey() string {
	if m != nil {
		return m.SecretAccessKey
	}
	return ""
}

func (m *Athena) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Athena) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*Resource)(nil), "v1.Resource")
	proto.RegisterType((*Kubernetes)(nil), "v1.Kubernetes")
	proto.RegisterType((*AmazonEKS)(nil), "v1.AmazonEKS")
	proto.RegisterType((*GoogleGKE)(nil), "v1.GoogleGKE")
	proto.RegisterType((*HTTPBasicAuth)(nil), "v1.HTTPBasicAuth")
	proto.RegisterType((*HTTPNoAuth)(nil), "v1.HTTPNoAuth")
	proto.RegisterType((*HTTPAuth)(nil), "v1.HTTPAuth")
	proto.RegisterType((*Mysql)(nil), "v1.Mysql")
	proto.RegisterType((*AuroraMysql)(nil), "v1.AuroraMysql")
	proto.RegisterType((*Clustrix)(nil), "v1.Clustrix")
	proto.RegisterType((*Maria)(nil), "v1.Maria")
	proto.RegisterType((*Memsql)(nil), "v1.Memsql")
	proto.RegisterType((*Athena)(nil), "v1.Athena")
}

func init() { proto.RegisterFile("drivers.proto", fileDescriptor_81dfd49b5b303fb4) }

var fileDescriptor_81dfd49b5b303fb4 = []byte{
	// 1182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x98, 0xcd, 0x6f, 0x1b, 0x45,
	0x18, 0xc6, 0xe3, 0xf5, 0x47, 0xec, 0xd7, 0x31, 0x6e, 0xa6, 0x20, 0xad, 0xaa, 0x1e, 0xa2, 0x48,
	0xa4, 0xa9, 0x8a, 0x9d, 0x9a, 0x94, 0x54, 0xe4, 0x52, 0xec, 0x12, 0xc5, 0x52, 0x44, 0x89, 0x4c,
	0xef, 0xab, 0xf1, 0xee, 0xd4, 0xbb, 0xb2, 0xbd, 0x63, 0x66, 0x66, 0x5d, 0xcc, 0x29, 0x0d, 0x12,
	0xe2, 0xc0, 0x85, 0x28, 0x1c, 0x39, 0x80, 0x00, 0x41, 0x25, 0x0a, 0x52, 0x2f, 0x70, 0x85, 0x3f,
	0xa0, 0x27, 0xe0, 0x52, 0xe0, 0x80, 0x38, 0xb6, 0xaa, 0xe0, 0x00, 0x42, 0x54, 0xa0, 0x99, 0x59,
	0x7f, 0xd5, 0x5b, 0x48, 0x7a, 0x49, 0x69, 0x73, 0xf3, 0xce, 0xf3, 0x7b, 0xb2, 0xef, 0xbe, 0xcf,
	0xce, 0x64, 0x76, 0x20, 0xe7, 0x30, 0xaf, 0x4b, 0x18, 0x2f, 0x76, 0x18, 0x15, 0x14, 0x19, 0xdd,
	0xd2, 0xb1, 0x67, 0xd4, 0x4f, 0xbb, 0xd0, 0x20, 0x7e, 0x81, 0x5f, 0xc6, 0x8d, 0x06, 0x61, 0x4b,
	0xb4, 0x23, 0x3c, 0xea, 0xf3, 0x25, 0xec, 0xfb, 0x54, 0x60, 0xf5, 0x5b, 0x3b, 0x8e, 0xe5, 0x42,
	0x49, 0x5f, 0xce, 0xdf, 0x49, 0x40, 0xba, 0x46, 0x38, 0x0d, 0x98, 0x4d, 0xd0, 0x32, 0x40, 0x33,
	0xa8, 0x13, 0xe6, 0x13, 0x41, 0xb8, 0xb9, 0xfb, 0xfd, 0x35, 0x7f, 0x2e, 0xb6, 0x98, 0x7d, 0xf6,
	0x89, 0x62, 0xb7, 0x54, 0xdc, 0x18, 0x08, 0xd5, 0xa9, 0xda, 0x08, 0x86, 0x4a, 0x00, 0xb8, 0x8d,
	0x5f, 0xa7, 0xbe, 0x45, 0x9a, 0xdc, 0xbc, 0xf3, 0xd1, 0x95, 0x35, 0x65, 0xca, 0x49, 0x53, 0x59,
	0x09, 0x6b, 0x1b, 0xaf, 0x54, 0xa7, 0x6a, 0x19, 0x4d, 0xad, 0x35, 0x95, 0xa5, 0x41, 0x69, 0xa3,
	0x45, 0xac, 0x46, 0x93, 0x98, 0xef, 0x5e, 0x7b, 0xa7, 0x32, 0xb4, 0xac, 0x2b, 0x61, 0x7d, 0x63,
	0x4d, 0x5a, 0x34, 0xb5, 0xde, 0x24, 0xe8, 0x1c, 0xe4, 0x5d, 0x21, 0x3a, 0x56, 0x1d, 0x73, 0xcf,
	0xb6, 0x70, 0x20, 0x5c, 0xf3, 0xed, 0xab, 0x3f, 0x7f, 0x1b, 0x53, 0xc6, 0x59, 0x69, 0xac, 0x5e,
	0xbc, 0xb8, 0x59, 0x91, 0x6a, 0x39, 0x10, 0x6e, 0x75, 0xaa, 0x96, 0x93, 0xfc, 0x60, 0x00, 0xad,
	0xc0, 0x8c, 0xfa, 0x03, 0x3e, 0xd5, 0xee, 0xf7, 0xae, 0xfe, 0x72, 0x23, 0x36, 0x7c, 0x3c, 0xe9,
	0xbe, 0x40, 0x43, 0x2b, 0x48, 0x52, 0x5f, 0xa1, 0x22, 0x64, 0x94, 0x4f, 0x99, 0x6e, 0x7f, 0xbd,
	0xdd, 0x54, 0x9e, 0x99, 0xbe, 0x27, 0x74, 0xa4, 0x25, 0xa3, 0xf8, 0xa7, 0x21, 0xd9, 0xee, 0xf1,
	0x57, 0x5b, 0xe6, 0x37, 0x5b, 0xbb, 0x5f, 0xea, 0x1b, 0x64, 0x24, 0xfc, 0x92, 0x1c, 0xac, 0x4e,
	0xd5, 0xb4, 0x8a, 0xce, 0xc2, 0x0c, 0x0e, 0x18, 0x65, 0xd8, 0xd2, 0xf4, 0xad, 0x0f, 0x6e, 0xa6,
	0x15, 0x9c, 0x57, 0x7d, 0x53, 0x52, 0xdf, 0x92, 0xc5, 0xc3, 0x4b, 0x54, 0x84, 0xb4, 0xdd, 0x0a,
	0xb8, 0x60, 0xde, 0x6b, 0xe6, 0xee, 0xa7, 0xb7, 0xef, 0xc6, 0x86, 0xf5, 0x9c, 0x0f, 0xc7, 0x65,
	0x3d, 0x7d, 0x46, 0xd5, 0x83, 0x99, 0x87, 0xcd, 0xdd, 0x1f, 0x3e, 0xfe, 0x71, 0xb4, 0x1e, 0x39,
	0xa8, 0xea, 0x91, 0x3f, 0xd0, 0x22, 0xa4, 0xda, 0xa4, 0x2d, 0x2b, 0xf9, 0xec, 0xab, 0x9f, 0xb6,
	0x34, 0x07, 0x8a, 0x53, 0xa3, 0xd5, 0xa9, 0x5a, 0xa8, 0xa3, 0x13, 0x90, 0xc2, 0xc2, 0x25, 0x3e,
	0x36, 0xdf, 0x7a, 0xf3, 0xfd, 0x93, 0x43, 0xb0, 0xac, 0x06, 0x25, 0xa8, 0xe5, 0x55, 0xf8, 0xf3,
	0x8f, 0xeb, 0xd3, 0xc9, 0x4f, 0x7e, 0xbb, 0x3e, 0x1d, 0xab, 0x00, 0xa4, 0x59, 0xf8, 0x96, 0xcd,
	0x7f, 0x1e, 0x07, 0x18, 0xbe, 0x4d, 0xe8, 0x38, 0x18, 0x9e, 0x63, 0x6e, 0x6d, 0x19, 0x73, 0xb1,
	0xc5, 0x4c, 0x05, 0x7e, 0x95, 0xa6, 0x2f, 0xa4, 0xa9, 0x66, 0x78, 0x0e, 0x9a, 0x83, 0x84, 0x8f,
	0xdb, 0xc4, 0xbc, 0x12, 0xa1, 0x2b, 0x05, 0x95, 0x20, 0xd7, 0xa1, 0x4c, 0x58, 0xb4, 0x4b, 0x18,
	0xf3, 0x1c, 0x62, 0x6e, 0x2b, 0x34, 0x39, 0x86, 0xce, 0x48, 0xe4, 0xe5, 0x90, 0x40, 0xa7, 0x60,
	0xda, 0x25, 0xb8, 0x25, 0xdc, 0x9e, 0xf9, 0x86, 0x82, 0xd3, 0x95, 0xfc, 0x4e, 0xd9, 0x78, 0x21,
	0x36, 0xe2, 0xe8, 0x13, 0x68, 0x01, 0xd2, 0x2e, 0xe5, 0x42, 0x55, 0x11, 0x9b, 0xa8, 0x61, 0xa0,
	0xa1, 0x05, 0x48, 0xc8, 0x9b, 0x98, 0xfa, 0xe6, 0x68, 0xa7, 0x9c, 0x5c, 0x8d, 0x9f, 0x39, 0xb3,
	0x3c, 0x5a, 0xaf, 0xd4, 0xd1, 0x39, 0x78, 0xca, 0x26, 0x4c, 0x78, 0x97, 0x3c, 0x1b, 0x0b, 0xa2,
	0xde, 0x2b, 0xca, 0x3c, 0xd1, 0x33, 0xe3, 0x13, 0x7f, 0xfc, 0xc9, 0x11, 0xb0, 0xdc, 0xe7, 0xd0,
	0xf3, 0x80, 0xec, 0x96, 0x47, 0x7c, 0x61, 0x8d, 0xc8, 0x66, 0x62, 0xc2, 0x3d, 0xab, 0xa9, 0xf3,
	0x43, 0x08, 0x9d, 0x04, 0x08, 0xad, 0x4d, 0xd2, 0x33, 0x93, 0x13, 0x96, 0x8c, 0x56, 0x37, 0x48,
	0x6f, 0x34, 0xbd, 0xf9, 0xef, 0xe2, 0x90, 0x19, 0x4c, 0xe5, 0xff, 0x43, 0x60, 0xc4, 0x77, 0x3a,
	0xd4, 0xf3, 0x45, 0x54, 0x60, 0x7d, 0x4d, 0x36, 0x03, 0xdb, 0x36, 0xe1, 0x5c, 0x35, 0x63, 0xb2,
	0xda, 0x8c, 0x56, 0x37, 0x48, 0x0f, 0xad, 0xc0, 0x2c, 0x27, 0x36, 0x23, 0xc2, 0x1a, 0x71, 0x4c,
	0xe6, 0x95, 0xd7, 0x50, 0x79, 0xe0, 0xbb, 0x6f, 0xd6, 0x89, 0x3d, 0x66, 0x3d, 0x0f, 0x29, 0x46,
	0x1a, 0x1e, 0xf5, 0x23, 0xc2, 0x0a, 0x15, 0x54, 0x80, 0x19, 0x35, 0xdb, 0x09, 0xb3, 0x54, 0xe7,
	0x53, 0x13, 0x64, 0x36, 0xd4, 0x2f, 0xe0, 0x36, 0x19, 0x0b, 0xf6, 0xa6, 0x01, 0x99, 0xc1, 0x82,
	0xfb, 0xc8, 0x04, 0x7b, 0xdf, 0xae, 0x1b, 0x7b, 0xec, 0xfa, 0x2a, 0x1c, 0xe5, 0x84, 0x75, 0x3d,
	0x9b, 0xc8, 0xbc, 0x69, 0x10, 0xce, 0x97, 0xc9, 0xc0, 0x67, 0x43, 0xac, 0xac, 0xa9, 0x7b, 0xe7,
	0xcd, 0xef, 0x71, 0xc8, 0x8d, 0xfd, 0x5b, 0x7a, 0xe8, 0x5b, 0x7c, 0x1c, 0xe2, 0x01, 0x6b, 0x45,
	0x74, 0x57, 0x0e, 0xa3, 0xe7, 0xe0, 0x88, 0x06, 0x6d, 0x97, 0xd8, 0x4d, 0xab, 0x83, 0x85, 0x1b,
	0xd1, 0xd3, 0xfc, 0x08, 0xb3, 0x89, 0x85, 0x2b, 0x73, 0x0b, 0x38, 0x61, 0xea, 0xd1, 0x26, 0x7b,
	0x38, 0xd0, 0x24, 0xd7, 0xc1, 0x9c, 0x5f, 0xa6, 0xcc, 0x89, 0x98, 0x20, 0x03, 0x0d, 0x9d, 0x85,
	0x59, 0x97, 0x60, 0x87, 0x30, 0x6e, 0xd5, 0x5b, 0xd8, 0x6e, 0xb6, 0x3c, 0x2e, 0x22, 0xe6, 0xc7,
	0x91, 0x10, 0xaa, 0xf4, 0x19, 0x39, 0x53, 0x1c, 0x72, 0x09, 0x07, 0x2d, 0xa1, 0x6b, 0x8f, 0x98,
	0x29, 0xa1, 0xae, 0xea, 0x2e, 0x40, 0x86, 0x07, 0x75, 0x87, 0xb6, 0xb1, 0xe7, 0x9b, 0xd3, 0x8a,
	0x9d, 0xe8, 0xdc, 0x90, 0x18, 0x4b, 0xfe, 0xc3, 0x38, 0xc0, 0x70, 0x4b, 0xf1, 0x78, 0xc6, 0x1e,
	0x19, 0x53, 0xfc, 0x01, 0x62, 0x4a, 0xec, 0x23, 0xa6, 0xe4, 0xbe, 0x62, 0xba, 0x11, 0x87, 0x74,
	0x7f, 0x17, 0xf7, 0x78, 0x86, 0x74, 0x0a, 0xb2, 0x72, 0x7d, 0xb4, 0x74, 0x08, 0x11, 0xf1, 0x80,
	0x94, 0xab, 0x4a, 0x8d, 0x4e, 0x34, 0xf1, 0x00, 0x89, 0x26, 0xf7, 0x91, 0x68, 0x6a, 0x5f, 0x89,
	0xfe, 0x65, 0x40, 0x52, 0x6f, 0x94, 0x1f, 0x9d, 0x7d, 0xe5, 0x70, 0xf5, 0x34, 0xf6, 0xb8, 0x7a,
	0xc6, 0xff, 0x65, 0xf5, 0x5c, 0x80, 0xb4, 0x83, 0x05, 0xae, 0x63, 0x1e, 0xb5, 0x69, 0x1c, 0x68,
	0xe8, 0x44, 0xb8, 0x9f, 0x4d, 0xaa, 0x87, 0x3e, 0xba, 0x53, 0x4e, 0xad, 0x26, 0x96, 0x97, 0x4f,
	0xaf, 0xdc, 0xbb, 0xa1, 0x1d, 0x6b, 0xff, 0x76, 0x1c, 0xb2, 0x23, 0x1f, 0x2f, 0x87, 0x21, 0x1c,
	0x44, 0x08, 0x7f, 0x1b, 0x90, 0xee, 0x7f, 0x0b, 0x1e, 0x26, 0x70, 0x10, 0x09, 0xa8, 0x55, 0x48,
	0x7d, 0x57, 0x1f, 0xb6, 0xff, 0x00, 0xda, 0x7f, 0xd7, 0x80, 0x94, 0x3e, 0xb7, 0x38, 0xec, 0xff,
	0x41, 0xf4, 0xff, 0x96, 0x01, 0x29, 0x7d, 0x1c, 0xf4, 0xd0, 0xf7, 0x7f, 0xfc, 0x10, 0x20, 0xb6,
	0xef, 0x43, 0x00, 0xe3, 0xbf, 0x0f, 0x01, 0x4e, 0x0f, 0xbe, 0xe1, 0x75, 0x20, 0xe6, 0x4e, 0x39,
	0xbb, 0x9a, 0x09, 0x78, 0x81, 0x60, 0x2e, 0x0a, 0xa5, 0x88, 0x2f, 0xfa, 0x79, 0x48, 0xd1, 0x40,
	0x74, 0x82, 0xa8, 0xcd, 0x55, 0xa8, 0x8c, 0x9d, 0xae, 0x2d, 0xc1, 0x71, 0x9b, 0xb6, 0x8b, 0x5c,
	0x30, 0xea, 0x37, 0x9c, 0x76, 0x11, 0x77, 0xbc, 0x62, 0xb7, 0x54, 0xec, 0xb4, 0x82, 0x76, 0xdd,
	0xf3, 0x1b, 0x95, 0xfc, 0x8b, 0xfa, 0xd0, 0x78, 0x33, 0x1c, 0xa8, 0xa7, 0xd4, 0xe1, 0xef, 0xf2,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x52, 0x69, 0x34, 0xfa, 0x4e, 0x16, 0x00, 0x00,
}

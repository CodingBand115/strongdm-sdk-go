// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.0
// source: access_rules.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// AccessRuleCreateRequest specifies parameters for a new access rule.
type AccessRuleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Parameters to define the new AccessRule.
	AccessRule *AccessRule `protobuf:"bytes,2,opt,name=access_rule,json=accessRule,proto3" json:"access_rule,omitempty"`
}

func (x *AccessRuleCreateRequest) Reset() {
	*x = AccessRuleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_rules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRuleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRuleCreateRequest) ProtoMessage() {}

func (x *AccessRuleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_rules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRuleCreateRequest.ProtoReflect.Descriptor instead.
func (*AccessRuleCreateRequest) Descriptor() ([]byte, []int) {
	return file_access_rules_proto_rawDescGZIP(), []int{0}
}

func (x *AccessRuleCreateRequest) GetMeta() *CreateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AccessRuleCreateRequest) GetAccessRule() *AccessRule {
	if x != nil {
		return x.AccessRule
	}
	return nil
}

// AccessRuleCreateResponse reports how the AccessRule was created in the system.
type AccessRuleCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The created AccessRule.
	AccessRule *AccessRule `protobuf:"bytes,2,opt,name=access_rule,json=accessRule,proto3" json:"access_rule,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *AccessRuleCreateResponse) Reset() {
	*x = AccessRuleCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_rules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRuleCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRuleCreateResponse) ProtoMessage() {}

func (x *AccessRuleCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_rules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRuleCreateResponse.ProtoReflect.Descriptor instead.
func (*AccessRuleCreateResponse) Descriptor() ([]byte, []int) {
	return file_access_rules_proto_rawDescGZIP(), []int{1}
}

func (x *AccessRuleCreateResponse) GetMeta() *CreateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AccessRuleCreateResponse) GetAccessRule() *AccessRule {
	if x != nil {
		return x.AccessRule
	}
	return nil
}

func (x *AccessRuleCreateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// AccessRuleGetRequest specifies which AccessRule to retrieve.
type AccessRuleGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the AccessRule to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AccessRuleGetRequest) Reset() {
	*x = AccessRuleGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_rules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRuleGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRuleGetRequest) ProtoMessage() {}

func (x *AccessRuleGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_rules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRuleGetRequest.ProtoReflect.Descriptor instead.
func (*AccessRuleGetRequest) Descriptor() ([]byte, []int) {
	return file_access_rules_proto_rawDescGZIP(), []int{2}
}

func (x *AccessRuleGetRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AccessRuleGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// AccessRuleGetResponse returns a requested AccessRule.
type AccessRuleGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested AccessRule.
	AccessRule *AccessRule `protobuf:"bytes,2,opt,name=access_rule,json=accessRule,proto3" json:"access_rule,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *AccessRuleGetResponse) Reset() {
	*x = AccessRuleGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_rules_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRuleGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRuleGetResponse) ProtoMessage() {}

func (x *AccessRuleGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_rules_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRuleGetResponse.ProtoReflect.Descriptor instead.
func (*AccessRuleGetResponse) Descriptor() ([]byte, []int) {
	return file_access_rules_proto_rawDescGZIP(), []int{3}
}

func (x *AccessRuleGetResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AccessRuleGetResponse) GetAccessRule() *AccessRule {
	if x != nil {
		return x.AccessRule
	}
	return nil
}

func (x *AccessRuleGetResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// AccessRuleDeleteRequest identifies a AccessRule by ID to delete.
type AccessRuleDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the AccessRule to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AccessRuleDeleteRequest) Reset() {
	*x = AccessRuleDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_rules_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRuleDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRuleDeleteRequest) ProtoMessage() {}

func (x *AccessRuleDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_rules_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRuleDeleteRequest.ProtoReflect.Descriptor instead.
func (*AccessRuleDeleteRequest) Descriptor() ([]byte, []int) {
	return file_access_rules_proto_rawDescGZIP(), []int{4}
}

func (x *AccessRuleDeleteRequest) GetMeta() *DeleteRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AccessRuleDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// AccessRuleDeleteResponse returns information about a AccessRule that was deleted.
type AccessRuleDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,2,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *AccessRuleDeleteResponse) Reset() {
	*x = AccessRuleDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_rules_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRuleDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRuleDeleteResponse) ProtoMessage() {}

func (x *AccessRuleDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_rules_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRuleDeleteResponse.ProtoReflect.Descriptor instead.
func (*AccessRuleDeleteResponse) Descriptor() ([]byte, []int) {
	return file_access_rules_proto_rawDescGZIP(), []int{5}
}

func (x *AccessRuleDeleteResponse) GetMeta() *DeleteResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AccessRuleDeleteResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// An AccessRule defines a match pattern for resources based either ID, either
// dbtype_alias or tags.
type AccessRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the AccessRule.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the target resource.
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// ID of the role this access rule applies to.
	RoleId string `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// IDs of resources this rule grants access to.
	ResourceIds []string `protobuf:"bytes,4,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AccessRule) Reset() {
	*x = AccessRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_rules_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRule) ProtoMessage() {}

func (x *AccessRule) ProtoReflect() protoreflect.Message {
	mi := &file_access_rules_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRule.ProtoReflect.Descriptor instead.
func (*AccessRule) Descriptor() ([]byte, []int) {
	return file_access_rules_proto_rawDescGZIP(), []int{6}
}

func (x *AccessRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccessRule) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AccessRule) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *AccessRule) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *AccessRule) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_access_rules_proto protoreflect.FileDescriptor

var file_access_rules_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x17,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xd0, 0xf3, 0xb3, 0x07, 0x01, 0x22,
	0xeb, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x14, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xd0, 0xf3,
	0xb3, 0x07, 0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x6a, 0x0a,
	0x14, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0xfa,
	0xf8, 0xb3, 0x07, 0x05, 0xd0, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0xe5, 0x01, 0x0a, 0x15, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x14, 0xfa, 0xf8, 0xb3,
	0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xd0, 0xf3, 0xb3, 0x07,
	0x01, 0x22, 0x70, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xd0, 0xf3,
	0xb3, 0x07, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0a,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x14,
	0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xd0,
	0xf3, 0xb3, 0x07, 0x01, 0x22, 0x8e, 0x03, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0xf2, 0xf8, 0xb3, 0x07, 0x1b, 0xa2, 0xf3, 0xb3, 0x07, 0x02, 0x49, 0x44, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xf2, 0xf8,
	0xb3, 0x07, 0x1a, 0xa2, 0xf3, 0xb3, 0x07, 0x0b, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xf2, 0xf8,
	0xb3, 0x07, 0x1e, 0xa2, 0xf3, 0xb3, 0x07, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x2b, 0xf2, 0xf8, 0xb3, 0x07, 0x26, 0xa2, 0xf3, 0xb3, 0x07, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x73, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x42, 0x13, 0xf2, 0xf8, 0xb3, 0x07, 0x0e, 0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x54, 0x61, 0x67,
	0x73, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x47, 0xfa, 0xf8,
	0xb3, 0x07, 0x19, 0xa2, 0xf3, 0xb3, 0x07, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xd0, 0xf3, 0xb3, 0x07, 0x01, 0x92, 0x41, 0x26, 0x32,
	0x24, 0x12, 0x22, 0x7b, 0x20, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x72, 0x2d, 0x37,
	0x22, 0x2c, 0x20, 0x22, 0x64, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x22, 0x7d, 0x32, 0xb5, 0x03, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x62, 0x22, 0x60, 0x0a, 0x1f,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b,
	0x65, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x3d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x74, 0x72,
	0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x59,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x62, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x1e, 0xca,
	0xf9, 0xb3, 0x07, 0x0f, 0xc2, 0xf9, 0xb3, 0x07, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0xca, 0xf9, 0xb3, 0x07, 0x05, 0xc8, 0xf9, 0xb3, 0x07, 0x01, 0x42, 0x67, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x13, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x69,
	0x6e, 0x67, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d,
	0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_access_rules_proto_rawDescOnce sync.Once
	file_access_rules_proto_rawDescData = file_access_rules_proto_rawDesc
)

func file_access_rules_proto_rawDescGZIP() []byte {
	file_access_rules_proto_rawDescOnce.Do(func() {
		file_access_rules_proto_rawDescData = protoimpl.X.CompressGZIP(file_access_rules_proto_rawDescData)
	})
	return file_access_rules_proto_rawDescData
}

var file_access_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_access_rules_proto_goTypes = []interface{}{
	(*AccessRuleCreateRequest)(nil),  // 0: v1.AccessRuleCreateRequest
	(*AccessRuleCreateResponse)(nil), // 1: v1.AccessRuleCreateResponse
	(*AccessRuleGetRequest)(nil),     // 2: v1.AccessRuleGetRequest
	(*AccessRuleGetResponse)(nil),    // 3: v1.AccessRuleGetResponse
	(*AccessRuleDeleteRequest)(nil),  // 4: v1.AccessRuleDeleteRequest
	(*AccessRuleDeleteResponse)(nil), // 5: v1.AccessRuleDeleteResponse
	(*AccessRule)(nil),               // 6: v1.AccessRule
	(*CreateRequestMetadata)(nil),    // 7: v1.CreateRequestMetadata
	(*CreateResponseMetadata)(nil),   // 8: v1.CreateResponseMetadata
	(*RateLimitMetadata)(nil),        // 9: v1.RateLimitMetadata
	(*GetRequestMetadata)(nil),       // 10: v1.GetRequestMetadata
	(*GetResponseMetadata)(nil),      // 11: v1.GetResponseMetadata
	(*DeleteRequestMetadata)(nil),    // 12: v1.DeleteRequestMetadata
	(*DeleteResponseMetadata)(nil),   // 13: v1.DeleteResponseMetadata
	(*Tags)(nil),                     // 14: v1.Tags
}
var file_access_rules_proto_depIdxs = []int32{
	7,  // 0: v1.AccessRuleCreateRequest.meta:type_name -> v1.CreateRequestMetadata
	6,  // 1: v1.AccessRuleCreateRequest.access_rule:type_name -> v1.AccessRule
	8,  // 2: v1.AccessRuleCreateResponse.meta:type_name -> v1.CreateResponseMetadata
	6,  // 3: v1.AccessRuleCreateResponse.access_rule:type_name -> v1.AccessRule
	9,  // 4: v1.AccessRuleCreateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	10, // 5: v1.AccessRuleGetRequest.meta:type_name -> v1.GetRequestMetadata
	11, // 6: v1.AccessRuleGetResponse.meta:type_name -> v1.GetResponseMetadata
	6,  // 7: v1.AccessRuleGetResponse.access_rule:type_name -> v1.AccessRule
	9,  // 8: v1.AccessRuleGetResponse.rate_limit:type_name -> v1.RateLimitMetadata
	12, // 9: v1.AccessRuleDeleteRequest.meta:type_name -> v1.DeleteRequestMetadata
	13, // 10: v1.AccessRuleDeleteResponse.meta:type_name -> v1.DeleteResponseMetadata
	9,  // 11: v1.AccessRuleDeleteResponse.rate_limit:type_name -> v1.RateLimitMetadata
	14, // 12: v1.AccessRule.tags:type_name -> v1.Tags
	0,  // 13: v1.AccessRules.Create:input_type -> v1.AccessRuleCreateRequest
	2,  // 14: v1.AccessRules.Get:input_type -> v1.AccessRuleGetRequest
	4,  // 15: v1.AccessRules.Delete:input_type -> v1.AccessRuleDeleteRequest
	1,  // 16: v1.AccessRules.Create:output_type -> v1.AccessRuleCreateResponse
	3,  // 17: v1.AccessRules.Get:output_type -> v1.AccessRuleGetResponse
	5,  // 18: v1.AccessRules.Delete:output_type -> v1.AccessRuleDeleteResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_access_rules_proto_init() }
func file_access_rules_proto_init() {
	if File_access_rules_proto != nil {
		return
	}
	file_options_proto_init()
	file_spec_proto_init()
	file_tags_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_access_rules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRuleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_rules_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRuleCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_rules_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRuleGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_rules_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRuleGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_rules_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRuleDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_rules_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRuleDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_rules_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_access_rules_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_access_rules_proto_goTypes,
		DependencyIndexes: file_access_rules_proto_depIdxs,
		MessageInfos:      file_access_rules_proto_msgTypes,
	}.Build()
	File_access_rules_proto = out.File
	file_access_rules_proto_rawDesc = nil
	file_access_rules_proto_goTypes = nil
	file_access_rules_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccessRulesClient is the client API for AccessRules service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessRulesClient interface {
	// Create registers a new AccessRule.
	Create(ctx context.Context, in *AccessRuleCreateRequest, opts ...grpc.CallOption) (*AccessRuleCreateResponse, error)
	// Get reads one AccessRule by ID.
	Get(ctx context.Context, in *AccessRuleGetRequest, opts ...grpc.CallOption) (*AccessRuleGetResponse, error)
	// Delete removes a AccessRule by ID.
	Delete(ctx context.Context, in *AccessRuleDeleteRequest, opts ...grpc.CallOption) (*AccessRuleDeleteResponse, error)
}

type accessRulesClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessRulesClient(cc grpc.ClientConnInterface) AccessRulesClient {
	return &accessRulesClient{cc}
}

func (c *accessRulesClient) Create(ctx context.Context, in *AccessRuleCreateRequest, opts ...grpc.CallOption) (*AccessRuleCreateResponse, error) {
	out := new(AccessRuleCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.AccessRules/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessRulesClient) Get(ctx context.Context, in *AccessRuleGetRequest, opts ...grpc.CallOption) (*AccessRuleGetResponse, error) {
	out := new(AccessRuleGetResponse)
	err := c.cc.Invoke(ctx, "/v1.AccessRules/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessRulesClient) Delete(ctx context.Context, in *AccessRuleDeleteRequest, opts ...grpc.CallOption) (*AccessRuleDeleteResponse, error) {
	out := new(AccessRuleDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.AccessRules/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessRulesServer is the server API for AccessRules service.
type AccessRulesServer interface {
	// Create registers a new AccessRule.
	Create(context.Context, *AccessRuleCreateRequest) (*AccessRuleCreateResponse, error)
	// Get reads one AccessRule by ID.
	Get(context.Context, *AccessRuleGetRequest) (*AccessRuleGetResponse, error)
	// Delete removes a AccessRule by ID.
	Delete(context.Context, *AccessRuleDeleteRequest) (*AccessRuleDeleteResponse, error)
}

// UnimplementedAccessRulesServer can be embedded to have forward compatible implementations.
type UnimplementedAccessRulesServer struct {
}

func (*UnimplementedAccessRulesServer) Create(context.Context, *AccessRuleCreateRequest) (*AccessRuleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAccessRulesServer) Get(context.Context, *AccessRuleGetRequest) (*AccessRuleGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAccessRulesServer) Delete(context.Context, *AccessRuleDeleteRequest) (*AccessRuleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAccessRulesServer(s *grpc.Server, srv AccessRulesServer) {
	s.RegisterService(&_AccessRules_serviceDesc, srv)
}

func _AccessRules_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRuleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessRulesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccessRules/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessRulesServer).Create(ctx, req.(*AccessRuleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessRules_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRuleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessRulesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccessRules/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessRulesServer).Get(ctx, req.(*AccessRuleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessRules_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRuleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessRulesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccessRules/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessRulesServer).Delete(ctx, req.(*AccessRuleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessRules_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AccessRules",
	HandlerType: (*AccessRulesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccessRules_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccessRules_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccessRules_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "access_rules.proto",
}
